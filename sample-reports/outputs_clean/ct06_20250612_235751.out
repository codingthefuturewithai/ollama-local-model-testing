Here's an example of how to implement the described Python class using requests library:
```python
import json
import logging
from typing import Any, Dict, Optional
from urllib.parse import urljoin
import requests
from requests.adapters import HTTPAdapter
from requests.exceptions import RequestException
from requests.packages.urllib3.util.retry import Retry
# Define base URL and API Key
BASE_URL = "https://api.example.com/v1/users"
API_KEY = "your_api_key_here"
class UserManagementClient:
"""
A client for interacting with the user management REST API.
"""
def __init__(self, base_url: str = BASE_URL, api_key: str = API_KEY):
self.base_url = base_url
self.api_key = api_key
self.session = requests.Session()
retries = Retry(total=5, backoff_factor=1, status_forcelist=[429])
self.session.mount('https://', HTTPAdapter(max_retries=retries))
def _make_request(self, method: str, endpoint: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
"""
Make a request to the API.
:param method: The HTTP method (GET, POST, PUT, DELETE).
:param endpoint: The API endpoint.
:param data: The data to send in the request body.
:return: The response from the server as a dictionary.
"""
url = urljoin(self.base_url, endpoint)
headers = {"X-API-Key": self.api_key}
try:
if method == 'GET':
response = self.session.get(url, headers=headers)
elif method == 'POST':
response = self.session.post(url, headers=headers, data=json.dumps(data))
elif method == 'PUT':
response = self.session.put(url, headers=headers, data=json.dumps(data))
elif method == 'DELETE':
response = self.session.delete(url, headers=headers)
else:
raise ValueError(f"Invalid HTTP method: {method}")
response.raise_for_status()
except RequestException as e:
logging.error(f"API request failed with error: {e}")
raise
return response.json()
def get_user(self, user_id: str) -> Dict[str, Any]:
"""
Retrieve a user by ID.
:param user_id: The ID of the user to retrieve.
:return: The user data as a dictionary.
"""
endpoint = f"/{user_id}"
return self._make_request('GET', endpoint)
def create_user(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
"""
Create a new user.
:param user_data: A dictionary containing the data for the new user.
:return: The created user data as a dictionary.
"""
return self._make_request('POST', '', user_data)
def update_user(self, user_id: str, user_data: Dict[str, Any]) -> Dict[str, Any]:
"""
Update an existing user.
:param user_id: The ID of the user to update.
:param user_data: A dictionary containing the updated data for the user.
:return: The updated user data as a dictionary.
"""
endpoint = f"/{user_id}"
return self._make_request('PUT', endpoint, user_data)
def delete_user(self, user_id: str) -> None:
"""
Delete an existing user.
:param user_id: The ID of the user to delete.
"""
endpoint = f"/{user_id}"
self._make_request('DELETE', endpoint)
```
This implementation includes methods for GET, POST, PUT, and DELETE operations, as well as handling authentication with API keys, retries, JSON request/response data, logging, type hints, and documentation.
