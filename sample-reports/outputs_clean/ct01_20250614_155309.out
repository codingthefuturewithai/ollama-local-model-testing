Here's a Python implementation of a binary search function that meets your requirements:
```python
def binary_search(arr, target):
"""
Perform binary search on a sorted list to find the index of the target value.
Parameters:
arr (list): A sorted list of elements (can be integers or any comparable type).
target: The element to search for in the list.
Returns:
int: The index of the target if found, otherwise -1.
Time Complexity:
O(log n) - where n is the number of elements in the input array.
Binary search repeatedly divides the search interval in half,
resulting in logarithmic time complexity.
Examples:
>>> binary_search([1, 2, 3, 4, 5], 3)
2
>>> binary_search([10, 20, 30, 40, 50], 25)
-1
"""
# Error handling for edge cases
if not arr:  # Check if the list is empty
return -1
left, right = 0, len(arr) - 1
while left <= right:
mid = (left + right) // 2
# Check if target is present at mid
if arrid] == target:
return mid
# If target is greater, ignore the left half
elif arrid] < target:
left = mid + 1
# If target is smaller, ignore the right half
else:
right = mid - 1
# Target not found in array
return -1
# Example usage
if __name__ == "__main__":
print(binary_search([1, 2, 3, 4, 5], 3))  # Output: 2
print(binary_search([10, 20, 30, 40, 50], 25))  # Output: -1
```
### Key Features of This Implementation:
1. **Function Parameters**: Takes a sorted list (`arr`) and the target value (`target`).
2. **Return Value**: Returns the index of the target if found, or `-1` if not.
3. **Algorithm**: Uses the standard binary search algorithm with O(log n) complexity.
4. **Error Handling**:
- Checks if the input list is empty and returns `-1` if it is.
5. **Docstring**:
- Provides a clear description of parameters, return values, time complexity, and examples.
This implementation handles all the requested features and includes proper documentation to help users understand how to use the function effectively.
